{"version":3,"sources":["BooksAPI.js","components/header.js","components/book.js","components/readstates.js","components/searchpage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","headerStyle","textAlign","background","color","padding","margin","Header","react_default","a","createElement","style","Book","bookStyle","width","height","backgroundImage","this","props","linkImg","className","value","disabled","title","author","Component","readStates","components_book","books","SearchPage","_this","onClick","setState","showSearchPage","type","placeholder","BooksApp","state","currentlyReading","wantToRead","read","_this2","fetch","concat","then","res","json","data","response","console","log","_this3","searchpage","header","readstates","React","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2e246e15.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <h1 style={headerStyle}>\r\n      MyReads\r\n    </h1>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  textAlign: \"center\",\r\n  background: \" #007bff\",\r\n  color: \"white\",\r\n  padding: \"10px\",\r\n  margin: \"0\"\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Book extends Component {\r\n\r\n  render() {\r\n\r\n    const bookStyle = {\r\n      width: 128,\r\n      height: 188,\r\n      backgroundImage: this.props.linkImg\r\n    }\r\n\r\n    return(\r\n        <li>\r\n          <div className=\"book\">\r\n            <div className=\"book-top\">\r\n              <div className=\"book-cover\" style={bookStyle}></div>\r\n              <div className=\"book-shelf-changer\">\r\n                <select>\r\n                  <option value=\"move\" disabled>Move to...</option>\r\n                  <option value=\"currentlyReading\">Currently Reading</option>\r\n                  <option value=\"wantToRead\">Want to Read</option>\r\n                  <option value=\"read\">Read</option>\r\n                  <option value=\"none\">None</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"book-title\">{this.props.title}</div>\r\n            <div className=\"book-authors\">{this.props.author}</div>\r\n          </div>\r\n        </li>\r\n  )\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Book;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Book from \"./book\";\r\n\r\nclass readStates extends Component {\r\n\r\n  render() {\r\n    return  (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{this.props.title}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            <Book books={this.props.books}/>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default readStates;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass SearchPage extends Component {\r\n\r\n  render() {\r\n\r\n    return(\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <button className=\"close-search\" onClick={() => this.setState({ showSearchPage: false })}>Close</button>\r\n          <div className=\"search-books-input-wrapper\">\r\n            {/*\r\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n              You can find these search terms here:\r\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n              you don't find a specific author or title. Every search is limited by search terms.\r\n            */}\r\n            <input type=\"text\" placeholder=\"Search by title or author\"/>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\"></ol>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default SearchPage;\r\n","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Header from \"./components/header\";\r\n// The ReadState will be the states: Currently Reading, Want To Read and Read.\r\nimport ReadStates from \"./components/readstates\";\r\n// Search Page: complete new page to search books\r\nimport SearchPage from \"./components/searchpage\";\r\n\r\nclass BooksApp extends React.Component {\r\n\r\n  state = {\r\n    /**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     */\r\n    books: [],\r\n    currentlyReading: [],\r\n    wantToRead: [],\r\n    read: [],\r\n    showSearchPage: false\r\n  }\r\n\r\n\r\n  // As soon as the component mount let's get all the books\r\n  componentDidMount() {\r\n    BooksAPI.getAll()\r\n      .then( (response) =>  {\r\n        this.setState({ books: response })\r\n        console.log(response)\r\n      })\r\n  }\r\n\r\n  // reorganizeBooks = () => {\r\n  //   this.state.books.map((book) => {\r\n  //     switch(book.shelf)\r\n  //     case \"currentlyReading\":\r\n  //     this.setState({currentlyReading.push(book)})\r\n  //     break\r\n  //     case \"wantToRead\":\r\n  //     this.setState({wantToRead.push(book)})\r\n  //     break;\r\n  //     case \"read\":\r\n  //     this.setState({read.push(book)})\r\n  //     break\r\n  //\r\n  //   })\r\n  //   console.log(this.state.books)\r\n  //   console.log(this.state.currentlyReading)\r\n  //   console.log(this.state.wantToRead)\r\n  //   console.log(this.state.read)\r\n  // }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        {this.state.showSearchPage ? (\r\n          <SearchPage />\r\n        ) : (\r\n          <div className=\"list-books\">\r\n            <Header />\r\n            <div className=\"list-books-content\">\r\n              <ReadStates books={this.state.books} />\r\n              <ReadStates books={this.state.books} />\r\n              <ReadStates books={this.state.books} />\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}